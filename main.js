/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  baseFolder: "Life",
  baseClassFolder: "Class"
};
var FolderPickerModal = class extends import_obsidian.FuzzySuggestModal {
  constructor(app, baseFolder) {
    super(app);
    this.baseFolder = baseFolder;
  }
  getItems() {
    const folderItems = this.app.vault.getAllLoadedFiles().filter((f) => f.path.startsWith(this.baseFolder) && !(f instanceof import_obsidian.TFile)).map((f) => f.path);
    return folderItems.length > 0 ? folderItems : [this.baseFolder];
  }
  getItemText(item) {
    return item;
  }
  onChooseItem(item) {
    this.resolve(item);
  }
  openModal() {
    return new Promise((resolve) => {
      this.resolve = resolve;
      this.open();
    });
  }
};
var FilenameModal = class extends import_obsidian.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Enter Filename" });
    const input = contentEl.createEl("input", { type: "text" });
    input.style.width = "100%";
    input.placeholder = "Enter the filename here...";
    const submitButton = contentEl.createEl("button", { text: "Submit" });
    submitButton.style.marginTop = "10px";
    submitButton.style.width = "100%";
    submitButton.addEventListener("click", () => {
      const filename = input.value.trim();
      if (filename) {
        this.onSubmit(filename);
        this.close();
      } else {
        new import_obsidian.Notice("Filename cannot be empty!");
      }
    });
    input.addEventListener("keypress", (event) => {
      if (event.key === "Enter") {
        submitButton.click();
      }
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var MyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    console.log("Loading MyPlugin...");
    await this.loadSettings();
    this.addCommand({
      id: "new-daily-note",
      name: "New Daily Note",
      callback: async () => {
        await this.createDailyNote();
      }
    });
    this.addCommand({
      id: "new-class-note",
      name: "New Class Note",
      callback: async () => {
        await this.createClassNote();
      }
    });
    this.addSettingTab(new MyPluginSettingTab(this.app, this));
    this.registerEvent(
      this.app.workspace.on("editor-paste", this.handlePaste.bind(this))
    );
  }
  onunload() {
    console.log("Unloading MyPlugin...");
  }
  handlePaste(evt, editor, markdownView) {
    const clipboardData = evt.clipboardData;
    if (!clipboardData) {
      return;
    }
    const text = clipboardData.getData("text");
    const imgurRegex = /^https:\/\/i\.imgur\.com\/[a-zA-Z0-9]+\.png$/;
    const matches = text.match(imgurRegex);
    if (matches) {
      evt.preventDefault();
      const formattedText = matches.map((link) => `![](${link})`).join("\n");
      editor.replaceSelection(formattedText);
    }
  }
  async createDailyNote() {
    const today = new Date();
    const year = today.getFullYear();
    const month = String(today.getMonth() + 1).padStart(2, "0");
    const day = String(today.getDate()).padStart(2, "0");
    const noteTitle = `${day}-${month}-${year}`;
    const folderPath = (0, import_obsidian.normalizePath)(`${this.settings.baseFolder}/${year}/${month}`);
    const filePath = `${folderPath}/${noteTitle}.md`;
    const folderExists = await this.app.vault.adapter.exists(folderPath);
    if (!folderExists) {
      await this.app.vault.createFolder(folderPath);
    }
    const fileExists = await this.app.vault.adapter.exists(filePath);
    if (!fileExists) {
      const content = `# ${noteTitle}

`;
      await this.app.vault.create(filePath, content);
      new import_obsidian.Notice(`Daily note created: ${filePath}`);
    } else {
      new import_obsidian.Notice(`Daily note already exists: ${filePath}`);
    }
    const file = this.app.vault.getAbstractFileByPath(filePath);
    if (file instanceof import_obsidian.TFile) {
      this.app.workspace.getLeaf(true).openFile(file);
    }
  }
  async createClassNote() {
    const folder = await new FolderPickerModal(this.app, this.settings.baseClassFolder).openModal();
    if (!folder) {
      new import_obsidian.Notice("No folder selected. Operation canceled.");
      return;
    }
    const modal = new FilenameModal(this.app, async (filename) => {
      const today = new Date();
      const formattedDate = `${String(today.getDate()).padStart(2, "0")}-${String(today.getMonth() + 1).padStart(2, "0")}-${today.getFullYear()}`;
      const fullFilename = `${formattedDate} ${filename.trim()}.md`;
      const filePath = (0, import_obsidian.normalizePath)(`${folder}/${fullFilename}`);
      const fileExists = await this.app.vault.adapter.exists(filePath);
      if (!fileExists) {
        const content = `# ${filename.trim()}

`;
        await this.app.vault.create(filePath, content);
        new import_obsidian.Notice(`Class note created: ${filePath}`);
      } else {
        new import_obsidian.Notice(`Class note already exists: ${filePath}`);
      }
      const file = this.app.vault.getAbstractFileByPath(filePath);
      if (file instanceof import_obsidian.TFile) {
        this.app.workspace.getLeaf(true).openFile(file);
      }
    });
    modal.open();
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var MyPluginSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for MyPlugin" });
    new import_obsidian.Setting(containerEl).setName("Base Folder").setDesc("Base folder for daily notes").addText((text) => text.setPlaceholder("Enter base folder").setValue(this.plugin.settings.baseFolder).onChange(async (value) => {
      this.plugin.settings.baseFolder = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
