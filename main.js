/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var MyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    console.log("Loading MyPlugin...");
    this.addCommand({
      id: "new-daily-note",
      name: "New Daily Note",
      callback: async () => {
        await this.createDailyNote();
      }
    });
  }
  onunload() {
    console.log("Unloading MyPlugin...");
  }
  async createDailyNote() {
    const today = new Date();
    const year = today.getFullYear();
    const month = String(today.getMonth() + 1);
    const day = String(today.getDate()).padStart(2, "0");
    const noteTitle = `${day}-${month}-${year}`;
    const folderPath = (0, import_obsidian.normalizePath)(`Life/${year}/${month}`);
    const filePath = `${folderPath}/${noteTitle}.md`;
    const folderExists = await this.app.vault.adapter.exists(folderPath);
    if (!folderExists) {
      await this.app.vault.createFolder(folderPath);
    }
    const fileExists = await this.app.vault.adapter.exists(filePath);
    if (!fileExists) {
      const content = `# ${noteTitle}

`;
      await this.app.vault.create(filePath, content);
      new import_obsidian.Notice(`Daily note created: ${filePath}`);
    } else {
      new import_obsidian.Notice(`Daily note already exists: ${filePath}`);
    }
    const file = this.app.vault.getAbstractFileByPath(filePath);
    if (file instanceof import_obsidian.TFile) {
      this.app.workspace.getLeaf(true).openFile(file);
    }
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBOb3RpY2UsIFBsdWdpbiwgVEZpbGUsIG5vcm1hbGl6ZVBhdGggfSBmcm9tICdvYnNpZGlhbic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE15UGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcbiAgYXN5bmMgb25sb2FkKCkge1xuICAgIGNvbnNvbGUubG9nKCdMb2FkaW5nIE15UGx1Z2luLi4uJyk7XG5cbiAgICAvLyBBZGQgdGhlIFwiTmV3IERhaWx5IE5vdGVcIiBjb21tYW5kXG4gICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgIGlkOiAnbmV3LWRhaWx5LW5vdGUnLFxuICAgICAgbmFtZTogJ05ldyBEYWlseSBOb3RlJyxcbiAgICAgIGNhbGxiYWNrOiBhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IHRoaXMuY3JlYXRlRGFpbHlOb3RlKCk7XG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgb251bmxvYWQoKSB7XG4gICAgY29uc29sZS5sb2coJ1VubG9hZGluZyBNeVBsdWdpbi4uLicpO1xuICB9XG5cbiAgYXN5bmMgY3JlYXRlRGFpbHlOb3RlKCkge1xuICAgIC8vIEdldCB0b2RheSdzIGRhdGVcbiAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKCk7XG4gICAgY29uc3QgeWVhciA9IHRvZGF5LmdldEZ1bGxZZWFyKCk7XG4gICAgY29uc3QgbW9udGggPSBTdHJpbmcodG9kYXkuZ2V0TW9udGgoKSArIDEpOyAvLyBNb250aHMgYXJlIDAtaW5kZXhlZFxuICAgIGNvbnN0IGRheSA9IFN0cmluZyh0b2RheS5nZXREYXRlKCkpLnBhZFN0YXJ0KDIsICcwJyk7XG4gICAgY29uc3Qgbm90ZVRpdGxlID0gYCR7ZGF5fS0ke21vbnRofS0ke3llYXJ9YDtcbiAgICBjb25zdCBmb2xkZXJQYXRoID0gbm9ybWFsaXplUGF0aChgTGlmZS8ke3llYXJ9LyR7bW9udGh9YCk7XG4gICAgY29uc3QgZmlsZVBhdGggPSBgJHtmb2xkZXJQYXRofS8ke25vdGVUaXRsZX0ubWRgO1xuXG4gICAgLy8gQ2hlY2sgaWYgdGhlIGZvbGRlciBleGlzdHM7IGlmIG5vdCwgY3JlYXRlIGl0XG4gICAgY29uc3QgZm9sZGVyRXhpc3RzID0gYXdhaXQgdGhpcy5hcHAudmF1bHQuYWRhcHRlci5leGlzdHMoZm9sZGVyUGF0aCk7XG4gICAgaWYgKCFmb2xkZXJFeGlzdHMpIHtcbiAgICAgIGF3YWl0IHRoaXMuYXBwLnZhdWx0LmNyZWF0ZUZvbGRlcihmb2xkZXJQYXRoKTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBpZiB0aGUgbm90ZSBhbHJlYWR5IGV4aXN0czsgaWYgbm90LCBjcmVhdGUgaXRcbiAgICBjb25zdCBmaWxlRXhpc3RzID0gYXdhaXQgdGhpcy5hcHAudmF1bHQuYWRhcHRlci5leGlzdHMoZmlsZVBhdGgpO1xuICAgIGlmICghZmlsZUV4aXN0cykge1xuICAgICAgY29uc3QgY29udGVudCA9IGAjICR7bm90ZVRpdGxlfVxcblxcbmA7IC8vIE9wdGlvbmFsIGluaXRpYWwgY29udGVudFxuICAgICAgYXdhaXQgdGhpcy5hcHAudmF1bHQuY3JlYXRlKGZpbGVQYXRoLCBjb250ZW50KTtcbiAgICAgIG5ldyBOb3RpY2UoYERhaWx5IG5vdGUgY3JlYXRlZDogJHtmaWxlUGF0aH1gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3IE5vdGljZShgRGFpbHkgbm90ZSBhbHJlYWR5IGV4aXN0czogJHtmaWxlUGF0aH1gKTtcbiAgICB9XG5cbiAgICAvLyBPcGVuIHRoZSBub3RlIGluIHRoZSBlZGl0b3JcbiAgICBjb25zdCBmaWxlID0gdGhpcy5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGZpbGVQYXRoKTtcbiAgICBpZiAoZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSB7XG4gICAgICB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhZih0cnVlKS5vcGVuRmlsZShmaWxlKTtcbiAgICB9XG4gIH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBMEQ7QUFFMUQsSUFBcUIsV0FBckIsY0FBc0MsdUJBQU87QUFBQSxFQUMzQyxNQUFNLFNBQVM7QUFDYixZQUFRLElBQUkscUJBQXFCO0FBR2pDLFNBQUssV0FBVztBQUFBLE1BQ2QsSUFBSTtBQUFBLE1BQ0osTUFBTTtBQUFBLE1BQ04sVUFBVSxZQUFZO0FBQ3BCLGNBQU0sS0FBSyxnQkFBZ0I7QUFBQSxNQUM3QjtBQUFBLElBQ0YsQ0FBQztBQUFBLEVBQ0g7QUFBQSxFQUVBLFdBQVc7QUFDVCxZQUFRLElBQUksdUJBQXVCO0FBQUEsRUFDckM7QUFBQSxFQUVBLE1BQU0sa0JBQWtCO0FBRXRCLFVBQU0sUUFBUSxJQUFJLEtBQUs7QUFDdkIsVUFBTSxPQUFPLE1BQU0sWUFBWTtBQUMvQixVQUFNLFFBQVEsT0FBTyxNQUFNLFNBQVMsSUFBSSxDQUFDO0FBQ3pDLFVBQU0sTUFBTSxPQUFPLE1BQU0sUUFBUSxDQUFDLEVBQUUsU0FBUyxHQUFHLEdBQUc7QUFDbkQsVUFBTSxZQUFZLEdBQUcsT0FBTyxTQUFTO0FBQ3JDLFVBQU0saUJBQWEsK0JBQWMsUUFBUSxRQUFRLE9BQU87QUFDeEQsVUFBTSxXQUFXLEdBQUcsY0FBYztBQUdsQyxVQUFNLGVBQWUsTUFBTSxLQUFLLElBQUksTUFBTSxRQUFRLE9BQU8sVUFBVTtBQUNuRSxRQUFJLENBQUMsY0FBYztBQUNqQixZQUFNLEtBQUssSUFBSSxNQUFNLGFBQWEsVUFBVTtBQUFBLElBQzlDO0FBR0EsVUFBTSxhQUFhLE1BQU0sS0FBSyxJQUFJLE1BQU0sUUFBUSxPQUFPLFFBQVE7QUFDL0QsUUFBSSxDQUFDLFlBQVk7QUFDZixZQUFNLFVBQVUsS0FBSztBQUFBO0FBQUE7QUFDckIsWUFBTSxLQUFLLElBQUksTUFBTSxPQUFPLFVBQVUsT0FBTztBQUM3QyxVQUFJLHVCQUFPLHVCQUF1QixVQUFVO0FBQUEsSUFDOUMsT0FBTztBQUNMLFVBQUksdUJBQU8sOEJBQThCLFVBQVU7QUFBQSxJQUNyRDtBQUdBLFVBQU0sT0FBTyxLQUFLLElBQUksTUFBTSxzQkFBc0IsUUFBUTtBQUMxRCxRQUFJLGdCQUFnQix1QkFBTztBQUN6QixXQUFLLElBQUksVUFBVSxRQUFRLElBQUksRUFBRSxTQUFTLElBQUk7QUFBQSxJQUNoRDtBQUFBLEVBQ0Y7QUFDRjsiLAogICJuYW1lcyI6IFtdCn0K
